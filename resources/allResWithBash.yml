resources:
  - name: ar_aql
    type: Aql
    configuration:
      sourceArtifactory: varsha_artifactory
      query: test
      addedProperties:
        key1: val1
        key2: val2
      mappings: 
        - name: ar_mapping1
          input: echo "hello"   
          output: echo "done"  
        - name: ar_mapping2
          input:  echo "hello2"   
          output: echo "done2"  
  
  - name: ar_buildInfo 
    type: BuildInfo
    configuration:
      sourceArtifactory: varsha_artifactory
      buildName: arBuild
      buildNumber: 123
  
  - name: ar_distributionRule
    type: DistributionRule
    configuration:
      sourceArtifactory: varsha_artifactory
      serviceName: testservice
      siteName: testsiteName
      cityName: testCityName
      countryCodes:
        - test
        - auto
  
  - name: ar_fileSpec
    type: FileSpec
    configuration:      
      sourceArtifactory: varsha_artifactory
      pattern: docker
      aql: ar_aql
      target: ar_target
      props: ar_props
      recursive: false
      flat: false
      excludePatterns: virtual
      archiveEntries: ar_archievEntries
#       buildName: buildDocker
#       buildNumber: 100
      sortBy: name
      sortOrder: ascending
      limit: 120
      offset: 12
 
  - name: ar_gitRepo
    type: GitRepo
    configuration:
      gitProvider: varsha_github
      path: jpline/sample-script
      files:
        include: tes*
        exclude: ech*
      branches:
        include: mast*
        exclude: pip*
      tags:
        include: tag*
        exclude: relea*
      buildOn:
         commit: true
         pullRequestCreate: true
         pullRequestClose: true
         releaseCreate: true
         tagCreate: true
      shallowDepth: 3
  
  - name: ar_image
    type: Image
    configuration:
       registry: varsha_docker
       imageName: shippabledocker/sample-node
       imageTag: latest
       autoPull: true  # default false
  
  - name: ar_image_python
    type: Image
    configuration:
       registry: varsha_docker
       imageName: shippabledocker/sample-python
       imageTag: latest
       autoPull: true  # default false
       
  - name: ar_kubeCluster
    type: KubeCluster
    configuration:
      integrationName: varsha_kube
      kubernetesConfig: varsha_kube
      bastionHostIP: 1.2.3.4
      bastionUser: sshUser
      bastionIntegrationName: varsha_sshKey
  
  - name: ar_releaseBundle
    type: ReleaseBundle
    configuration:
      sourceArtifactory: varsha_artifactory
      name: docker
      version: v1.2.3
      isSigned: true
      
  - name: ar_remoteFile
    type: RemoteFile
    configuration:      
      source: varsha_file
      fileLocation: $HOME
      fileName: steplet
      fileDateTime: 06-Apr-2020
  
  - name: ar_vmCluster
    type: VmCluster
    configuration:
      sshKey: varsha_sshKey
      targets:
        - 1.2.3.4
        - 1.2.3.5
        - 1.2.3.6
        
  - name: ar_webhook
    type: Webhook
    configuration:
      webhookName: varsha_webhook
      payload: "testing from resource"

pipelines:
  - name: varsha_pipeline_ar
    steps:
      - name: input_res_bash
        type: Bash
        configuration:
          integrations:
            - name: varsha_slack
          inputResources:
            - name: ar_aql
            - name: ar_buildInfo 
            - name: ar_distributionRule
           # - name: ar_fileSpec
            - name: ar_gitRepo
            - name: ar_image
            - name: ar_kubeCluster
            - name: ar_releaseBundle
            - name: ar_remoteFile
            - name: ar_vmCluster
            - name: ar_webhook
        execution:
          onExecute:
            - printenv
            - docker images
           # - test "$ENV1" == "value1"
            #- test "$ENV2" == "value2"
            
            - echo "-------------------------------------------- IMAGE RESOURCE -------------------------------------------------"
            - add_run_variable imageTag="firstTest"
            
            - pushd $res_ar_image_resourcePath
            
            - add_pipeline_variable imageName="shippabledocker/ship_plv2pyt" imageTag="tip"
            
            - popd
            - echo "------------------------------------------- DONE WITH IMAGE RESOURCE -----------------------------------------"
            
            - echo "-------------------------------------------- GITREPO RESOURCE ----------------------------------------------"
            - pushd $res_ar_gitRepo_resourcePath
            - source example.env
            - echo $TEST
            - ls -la
            - save_run_state test.sh my_file
            
            - read_json packages.json "name"
            
            - openssl genrsa -out key.pem 1024 
            - openssl rsa -in key.pem -text -noout
            - openssl rsa -in key.pem -pubout -out pub.pem 
            - openssl rsa -in pub.pem -pubin -text -noout 
            
            - encrypt_string "secretValue" --key pub.pem
            - encrypted=$(encrypt_string "secretValue" --key pub.pem)
            - echo "$encrypted"
            - decrypt_string "$encrypted" --key key.pem
            
            - encrypt_file --output encrypted.txt crypt.txt --key pub.pem
            - cat encrypted.txt
            - decrypt_file encrypted.txt --output decrypted.txt --key key.pem
            - cat decrypted.txt
            
            - echo "$STEP_URL"
            - echo "$SAMPLE"
            - echo "$TEST"
            - echo "$res_ar_gitRepo_isPrerelease"
            
            - replace_envs example.json sample.json
            - echo "$STEP_URL"
            - echo "$TEST"
            - echo "$BRANCH"
            - echo "$res_ar_gitRepo_isPrerelease"
            - echo "$SAMPLE"
  
            - cache_files echo.sh my_cache
           # - restore_cache my_file echo.sh
            - popd
            
            - echo "------------------------------------------ DONE WITH GITREPO RESOURCE --------------------------------------------------------------------------------"
            
            - bump_semver v1.0.1 major
            - bump_semver v0.0.1 patch
            
            - compare_git --resource ar_gitRepo --commit-range HEAD~1..HEAD echo.sh
            
            - update_commit_status ar_gitRepo --status failure --message "updated in utility step" --context jfrog_pipelines
            
            - switch_env nodejs 8.16.0
            
      #      - write_output webhookInt "payload=updating_outputResource_from_step_for_Internalwebhook_1"
            
       #     - write_output utility_testRepo "branches=testing123"
            - send_notification varsha_slack
           # - send_notification varshaJira --project-id TES --type Bug --description "test api step_id=$STEP_ID" --summary "no issue" 
            
            - execute_command echo $res_ar_gitRepo_resourcePath
          #  - retry_command "git clone git@bitbucket.org:shiptest-rc-me/testprivate.git" #worked
            - replicate_resource ar_image ar_image_python #throws error
            
            - printenv
            - docker images
            
            #- retry_command grunt install
           # - mkdir -p shippable/testresults && mkdir -p shippable/codecoverage
           # - ./node_modules/.bin/istanbul cover grunt -- -u tdd
           # - ./node_modules/.bin/istanbul report cobertura --dir shippable/codecoverage/
           # - save_tests $res_utility_scriptRepo_resourcePath/shippable/testresults/testresults.xml
          onComplete: 
            - echo "Ah! done"
      
